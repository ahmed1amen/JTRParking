// <auto-generated />
using System;
using JTRParking.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JTRParking.Migrations
{
    [DbContext(typeof(JTRDbContext))]
    partial class JTRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JTRParking.Models.Parking", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DriverMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ModifiedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Amount = 0m,
                            Barcode = "202404092213151",
                            CreatedAt = new DateTime(2024, 4, 9, 22, 13, 15, 300, DateTimeKind.Local).AddTicks(3036),
                            CreatedBy = 1m,
                            DriverMobile = "+15485949548",
                            DriverName = "Hassan",
                            InTime = new DateTime(2024, 4, 9, 22, 13, 15, 300, DateTimeKind.Local).AddTicks(3029),
                            Status = 0,
                            VehicleType = "Car"
                        },
                        new
                        {
                            Id = 2m,
                            Amount = 0m,
                            Barcode = "202404092213151",
                            CreatedAt = new DateTime(2024, 4, 9, 22, 13, 15, 300, DateTimeKind.Local).AddTicks(3057),
                            CreatedBy = 1m,
                            DriverMobile = "+164598756",
                            DriverName = "Hassan",
                            InTime = new DateTime(2024, 4, 10, 3, 13, 15, 300, DateTimeKind.Local).AddTicks(3053),
                            Status = 0,
                            VehicleType = "Motor"
                        });
                });

            modelBuilder.Entity("JTRParking.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "first_hour_rate",
                            Value = "50"
                        },
                        new
                        {
                            Id = 2,
                            Key = "hourly_rate",
                            Value = "20"
                        },
                        new
                        {
                            Id = 3,
                            Key = "currency_symbol",
                            Value = "MAD"
                        });
                });

            modelBuilder.Entity("JTRParking.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            Password = "admin",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee",
                            Password = "employee",
                            Role = 1,
                            Username = "employee"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
