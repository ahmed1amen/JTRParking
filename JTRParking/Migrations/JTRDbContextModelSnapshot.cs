// <auto-generated />
using System;
using JTRParking.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JTRParking.Migrations
{
    [DbContext(typeof(JTRDbContext))]
    partial class JTRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JTRParking.Models.Parking", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DriverMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ModifiedBy")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShiftId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ShiftId");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Amount = 100m,
                            Barcode = "202506161545161",
                            CreatedAt = new DateTime(2025, 6, 16, 15, 45, 16, 648, DateTimeKind.Local).AddTicks(5787),
                            CreatedBy = 1m,
                            DriverMobile = "+15485949548",
                            DriverName = "Hassan",
                            InTime = new DateTime(2025, 6, 16, 15, 45, 16, 648, DateTimeKind.Local).AddTicks(5783),
                            ShiftId = 1m,
                            Status = 0,
                            VehicleType = "Car"
                        },
                        new
                        {
                            Id = 2m,
                            Amount = 200m,
                            Barcode = "202506162045161",
                            CreatedAt = new DateTime(2025, 6, 16, 15, 45, 16, 648, DateTimeKind.Local).AddTicks(5797),
                            CreatedBy = 1m,
                            DriverMobile = "+164598756",
                            DriverName = "Hassan",
                            InTime = new DateTime(2025, 6, 16, 20, 45, 16, 648, DateTimeKind.Local).AddTicks(5795),
                            ShiftId = 2m,
                            Status = 0,
                            VehicleType = "Motor"
                        });
                });

            modelBuilder.Entity("JTRParking.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "first_hour_rate",
                            Value = "50"
                        },
                        new
                        {
                            Id = 2,
                            Key = "hourly_rate",
                            Value = "20"
                        },
                        new
                        {
                            Id = 3,
                            Key = "currency_symbol",
                            Value = "MAD"
                        },
                        new
                        {
                            Id = 4,
                            Key = "parking_ticket_header_title",
                            Value = "JTR Parking"
                        },
                        new
                        {
                            Id = 5,
                            Key = "parking_ticket_header_sub_title",
                            Value = "JTR Solutions"
                        });
                });

            modelBuilder.Entity("JTRParking.Models.Shift", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreatedAt = new DateTime(2025, 6, 16, 15, 45, 16, 648, DateTimeKind.Local).AddTicks(4195),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            Name = "Morning Shift",
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = 1,
                            UserId = 2m
                        },
                        new
                        {
                            Id = 2m,
                            CreatedAt = new DateTime(2025, 6, 16, 15, 45, 16, 648, DateTimeKind.Local).AddTicks(4235),
                            EndTime = new TimeSpan(0, 23, 59, 0, 0),
                            Name = "Evening Shift",
                            StartTime = new TimeSpan(0, 16, 0, 0, 0),
                            Status = 0,
                            UserId = 3m
                        });
                });

            modelBuilder.Entity("JTRParking.Models.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Name = "Admin",
                            Password = "admin",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2m,
                            Name = "Employee IN",
                            Password = "employeein",
                            Role = 1,
                            Username = "employeein"
                        },
                        new
                        {
                            Id = 3m,
                            Name = "Employee OUT",
                            Password = "employeeout",
                            Role = 2,
                            Username = "employeeout"
                        });
                });

            modelBuilder.Entity("JTRParking.Models.Parking", b =>
                {
                    b.HasOne("JTRParking.Models.User", "Creator")
                        .WithMany("CreatedParkings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JTRParking.Models.User", "Modifier")
                        .WithMany("ModifiedParkings")
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("JTRParking.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("JTRParking.Models.Shift", b =>
                {
                    b.HasOne("JTRParking.Models.User", "User")
                        .WithMany("Shifts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JTRParking.Models.User", b =>
                {
                    b.Navigation("CreatedParkings");

                    b.Navigation("ModifiedParkings");

                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
